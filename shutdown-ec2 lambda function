#https://gist.githubusercontent.com/ad-saxena/5ab87bffa1a1ae79561b7688ead4fb36/raw/3620adad3dc999e00d1ce2511d1935a36e82eddb/auto-shutdown.py
#https://medium.com/@amandeepsaxena/how-to-implement-aws-ec2-auto-shutdown-for-cost-optimisation-54a425741ecf
import boto3

def lambda_handler(event, context):
    # Initialize the EC2 client
    ec2 = boto3.client('ec2')
    
    # Define the tag key and value to identify instances to be stopped
    tag_key = 'AutoShutdown'
    tag_value = 'true'
    
    # Get a list of all instances
    instances = ec2.describe_instances()
    
    # Iterate through reservations and instances
    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            # Check if the 'AutoShutdown' tag exists and its value is 'true'
            for tag in instance.get('Tags', []):
                if tag['Key'] == tag_key and tag['Value'] == tag_value:
                    instance_id = instance['InstanceId']
                    
                    # Check the current state of the instance
                    instance_state = instance['State']['Name']
                    
                    # If the instance is running, stop it
                    if instance_state == 'running':
                        ec2.stop_instances(InstanceIds=[instance_id])
                        print(f"Stopped EC2 instance {instance_id}")
                    else:
                        print(f"EC2 instance {instance_id} is not in a 'running' state, skipping.")
                else:
                    print(f"No matching instances with the {tag_key}:{tag_value} tag found.")
